"use client";

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import axios from 'axios';
import { 
  PlusCircle, 
  MinusCircle, 
  CheckCircle, 
  ChevronRight, 
  ChevronLeft, 
  Save, 
  Upload, 
  X, 
  Loader2,
  AlertCircle,
  Lightbulb
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import { Toaster } from 'react-hot-toast';

// Define constants for form selections
const EXAM_TYPES = [
  { value: 'jee-main', label: 'JEE Main' },
  { value: 'jee-advanced', label: 'JEE Advanced' },
  { value: 'neet', label: 'NEET' },
  { value: 'cbse', label: 'CBSE' },
  { value: 'icse', label: 'ICSE' },
  { value: 'other', label: 'Other' }
];

const SUBJECTS = [
  { value: 'physics', label: 'Physics' },
  { value: 'chemistry', label: 'Chemistry' },
  { value: 'mathematics', label: 'Mathematics' },
  { value: 'biology', label: 'Biology' }
];

const DIFFICULTY_LEVELS = [
  { value: 'easy', label: 'Easy' },
  { value: 'medium', label: 'Medium' },
  { value: 'hard', label: 'Hard' },
  { value: 'very-hard', label: 'Very Hard' }
];

const LANGUAGE_LEVELS = [
  { value: 'beginner', label: 'Beginner' },
  { value: 'intermediate', label: 'Intermediate' },
  { value: 'advanced', label: 'Advanced' },
  { value: 'native', label: 'Native' }
];

const LANGUAGES = [
  { value: 'english', label: 'English' },
  { value: 'hindi', label: 'Hindi' },
  { value: 'tamil', label: 'Tamil' },
  { value: 'telugu', label: 'Telugu' },
  { value: 'kannada', label: 'Kannada' },
  { value: 'malayalam', label: 'Malayalam' },
  { value: 'bengali', label: 'Bengali' },
  { value: 'marathi', label: 'Marathi' },
  { value: 'gujarati', label: 'Gujarati' }
];

const QUESTION_TYPES = [
  { value: 'single', label: 'Single Choice' },
  { value: 'multiple', label: 'Multiple Choice' },
  { value: 'numerical', label: 'Numerical' }
];

// Years for questions (past to current)
const YEARS = Array.from({ length: new Date().getFullYear() - 1990 + 1 }, (_, i) => String(1990 + i));

// Physics Sections
const PHYSICS_SECTIONS = [
  { value: 'mechanics', label: 'Mechanics' },
  { value: 'electromagnetism', label: 'Electromagnetism' },
  { value: 'thermodynamics', label: 'Thermodynamics' },
  { value: 'optics', label: 'Optics' },
  { value: 'modern-physics', label: 'Modern Physics' },
  { value: 'waves', label: 'Waves & Oscillations' },
  { value: 'measurement', label: 'Units & Measurement' }
];

// Chemistry Sections
const CHEMISTRY_SECTIONS = [
  { value: 'organic', label: 'Organic Chemistry' },
  { value: 'inorganic', label: 'Inorganic Chemistry' },
  { value: 'physical', label: 'Physical Chemistry' },
  { value: 'analytical', label: 'Analytical Chemistry' },
  { value: 'biochemistry', label: 'Biochemistry' }
];

// Mathematics Sections
const MATHEMATICS_SECTIONS = [
  { value: 'algebra', label: 'Algebra' },
  { value: 'calculus', label: 'Calculus' },
  { value: 'geometry', label: 'Geometry' },
  { value: 'trigonometry', label: 'Trigonometry' },
  { value: 'statistics', label: 'Statistics & Probability' },
  { value: 'vectors', label: 'Vectors & 3D Geometry' }
];

// Form steps
const FORM_STEPS = [
  { title: 'Question Content', icon: 'pen' },
  { title: 'Details & Classification', icon: 'folder' },
  { title: 'Solution & Hints', icon: 'lightbulb' },
  { title: 'Tags & Topics', icon: 'tag' }
];

// Interfaces for type safety
interface Option {
  text: string;
  image: File | null;
}

interface Hint {
  text: string;
  image: File | null;
}

interface CommonMistake {
  description: string;
  explanation: string;
}

interface NumericalAnswer {
  exactValue: number;
  range: {
    min: number;
    max: number;
  };
  unit: string;
}

interface QuestionFormData {
  question: string;
  questionImage: File | null;
  options: Option[];
  correctOptions: number[];
  questionType: string;
  examType: string;
  subject: string;
  chapter: string;
  sectionPhysics: string;
  sectionChemistry: string;
  sectionMathematics: string;
  difficulty: string;
  tags: string[];
  solution: string;
  solutionImage: File | null;
  hints: Hint[];
  relatedTopics: string[];
  commonMistakes: CommonMistake[];
  prerequisites: string[];
  language: string;
  languageLevel: string;
  year: string;
  marks: number;
  negativeMarks: number;
  expectedTime: number;
  numericalAnswer: NumericalAnswer;
  isVerified: boolean;
  conceptualDifficulty: number;
}

// Helper Components
interface ImagePreviewProps {
  file: File;
  onRemove: () => void;
  size?: 'sm' | 'md' | 'lg';
}

const ImagePreview: React.FC<ImagePreviewProps> = ({ file, onRemove, size = 'md' }) => {
  const [preview, setPreview] = useState<string>('');

  useEffect(() => {
    if (!file) return;
    
    const objectUrl = URL.createObjectURL(file);
    setPreview(objectUrl);
    
    return () => URL.revokeObjectURL(objectUrl);
  }, [file]);

  const dimensions = {
    sm: 'h-12 w-12',
    md: 'h-24 w-24',
    lg: 'h-32 w-32'
  };

  const iconSize = {
    sm: 12,
    md: 14,
    lg: 16
  };

  return (
    <div className="relative inline-block">
      <div className={`border border-gray-200 rounded-lg overflow-hidden bg-gray-50 ${dimensions[size]} relative`}>
        <Image 
          src={preview} 
          alt="Preview" 
          fill
          style={{ objectFit: 'contain' }}
        />
      </div>
      <button
        type="button"
        onClick={onRemove}
        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
      >
        <X size={iconSize[size]} />
      </button>
    </div>
  );
};

interface FileUploadProps {
  onFileSelect: (file: File) => void;
  label?: string;
  initialFile?: File | null;
  size?: 'sm' | 'md' | 'lg';
  compact?: boolean;
}

const FileUpload: React.FC<FileUploadProps> = ({ 
  onFileSelect, 
  label, 
  initialFile, 
  size = 'md',
  compact = false 
}) => {
  const [file, setFile] = useState<File | null>(initialFile || null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setFile(selectedFile);
      onFileSelect(selectedFile);
    }
  };

  const handleRemoveFile = () => {
    setFile(null);
    onFileSelect(null as unknown as File); // Pass null to parent
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Compact design for inline use
  if (compact) {
    return (
      <div className="inline-flex items-center">
        {file ? (
          <div className="flex items-center gap-2">
            <ImagePreview file={file} onRemove={handleRemoveFile} size="sm" />
            <button
              type="button"
              onClick={() => fileInputRef.current?.click()}
              className="text-blue-600 text-sm hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded-md"
            >
              Change
            </button>
          </div>
        ) : (
          <button
            type="button"
            onClick={() => fileInputRef.current?.click()}
            className="inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            <Upload size={14} className="mr-1" />
            {label || "Upload Image"}
          </button>
        )}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept="image/*"
          className="hidden"
          aria-label={label || "Upload image"}
        />
      </div>
    );
  }

  // Standard design for full-width use
  return (
    <div className="mt-2">
      {label && (
        <div className="flex items-center justify-between mb-1">
          <label className="block text-sm font-medium text-gray-700">
            {label}
          </label>
        </div>
      )}
      
      {!file ? (
        <div 
          onClick={() => fileInputRef.current?.click()} 
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              fileInputRef.current?.click();
            }
          }}
          tabIndex={0}
          role="button"
          aria-label={label || "Upload image"}
          className="cursor-pointer border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-blue-500 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <Upload className="mx-auto h-6 w-6 text-gray-400" />
          <p className="mt-1 text-sm text-gray-500">Click to upload an image</p>
          <p className="text-xs text-gray-400">PNG, JPG, JPEG up to 5MB</p>
        </div>
      ) : (
        <ImagePreview file={file} onRemove={handleRemoveFile} size={size} />
      )}
      
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="image/*"
        className="hidden"
      />
    </div>
  );
};

export default function AddQuestion() {
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [saved, setSaved] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [showShortcuts, setShowShortcuts] = useState(false);
  const router = useRouter();
  
  // Initialize form state with all required fields
  const [formData, setFormData] = useState<QuestionFormData>({
    question: "",
    questionImage: null,
    options: [
      { text: "", image: null },
      { text: "", image: null },
      { text: "", image: null }, 
      { text: "", image: null }
    ],
    correctOptions: [],
    questionType: "single",
    examType: "",
    subject: "",
    chapter: "",
    sectionPhysics: "",
    sectionChemistry: "",
    sectionMathematics: "",
    difficulty: "medium",
    year: new Date().getFullYear().toString(),
    languageLevel: "intermediate",
    language: "english",
    solution: "",
    solutionImage: null,
    hints: [],
    tags: [],
    relatedTopics: [],
    prerequisites: [],
    marks: 1,
    negativeMarks: 0,
    expectedTime: 120, // in seconds
    commonMistakes: [],
    conceptualDifficulty: 5,
    isVerified: false,
    numericalAnswer: {
      exactValue: 0,
      range: {
        min: 0,
        max: 0
      },
      unit: ""
    }
  });
  
  // KeyboardShortcuts component defined inside AddQuestion
  const KeyboardShortcuts = () => {
    return (
      <>
        {/* Toggle button - always visible */}
        <button 
          onClick={() => setShowShortcuts(prev => !prev)}
          className="fixed bottom-4 right-4 bg-blue-600 text-white rounded-full p-3 shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 z-20"
          aria-label={showShortcuts ? "Hide keyboard shortcuts" : "Show keyboard shortcuts"}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </button>
        
        {/* Shortcuts panel - shown when toggled */}
        {showShortcuts && (
          <div className="fixed bottom-16 right-4 bg-white rounded-lg shadow-md border border-gray-200 p-4 text-xs z-10 max-w-xs">
            <div className="flex justify-between items-center mb-2">
              <h4 className="font-semibold text-gray-700">Keyboard Shortcuts</h4>
              <button 
                onClick={() => setShowShortcuts(false)}
                className="text-gray-400 hover:text-gray-600"
                aria-label="Close shortcuts"
              >
                <X size={14} />
              </button>
            </div>
            <ul className="space-y-2">
              <li className="flex items-center">
                <kbd className="px-2 py-1 bg-gray-100 rounded border border-gray-300 mr-2">Ctrl+S</kbd>
                <span>Save draft</span>
              </li>
              <li className="flex items-center">
                <kbd className="px-2 py-1 bg-gray-100 rounded border border-gray-300 mr-2">Ctrl+→</kbd>
                <span>Next step</span>
              </li>
              <li className="flex items-center">
                <kbd className="px-2 py-1 bg-gray-100 rounded border border-gray-300 mr-2">Ctrl+←</kbd>
                <span>Previous step</span>
              </li>
              <li className="flex items-center">
                <kbd className="px-2 py-1 bg-gray-100 rounded border border-gray-300 mr-2">Ctrl+1-4</kbd>
                <span>Jump to step</span>
              </li>
            </ul>
          </div>
        )}
      </>
    );
  };
  
  // Autosave functionality
  useEffect(() => {
    const autosaveData = () => {
      // Don't save file objects in localStorage
      const dataToSave = { ...formData };
      // Set file objects to null instead of using delete
      dataToSave.questionImage = null;
      dataToSave.solutionImage = null;
      dataToSave.options = dataToSave.options.map(opt => ({ ...opt, image: null }));
      dataToSave.hints = dataToSave.hints.map(hint => ({ ...hint, image: null }));
      
      localStorage.setItem('questionDraft', JSON.stringify(dataToSave));
    };

    const timeoutId = setTimeout(autosaveData, 1000);
    return () => clearTimeout(timeoutId);
  }, [formData]);

  // Load draft on mount
  useEffect(() => {
    const draft = localStorage.getItem('questionDraft');
    if (draft) {
      const parsedDraft = JSON.parse(draft);
      // Ensure the structure matches our current state
      setFormData(prevData => ({
        ...prevData,
        ...parsedDraft,
        questionImage: null,
        solutionImage: null,
        options: parsedDraft.options?.map((opt: any) => ({ ...opt, image: null })) || prevData.options,
        hints: parsedDraft.hints?.map((hint: any) => ({ ...hint, image: null })) || prevData.hints
      }));
    }
  }, []);

  // Handle input changes
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,
    field?: string,
    nestedField?: string,
    index?: number
  ) => {
    // Clear error for this field
    if (field) setErrors(prev => ({ ...prev, [field]: '' }));
    
    const { name, value } = e.target;
    const fieldName = field || name;
    
    setFormData(prev => {
      // Create a deep copy to avoid mutation
      const newState = { ...prev };
      
      if (index !== undefined && nestedField) {
        // Handle nested array fields like options[0].text
        if (fieldName === 'options') {
          const newOptions = [...prev.options];
          newOptions[index] = { ...newOptions[index], [nestedField]: value };
          newState.options = newOptions;
        } else if (fieldName === 'hints') {
          const newHints = [...prev.hints];
          newHints[index] = { ...newHints[index], [nestedField]: value };
          newState.hints = newHints;
        } else if (fieldName === 'commonMistakes') {
          const newMistakes = [...prev.commonMistakes];
          newMistakes[index] = { ...newMistakes[index], [nestedField]: value };
          newState.commonMistakes = newMistakes;
        }
      } else if (nestedField && fieldName === 'numericalAnswer') {
        // Handle nested object like numericalAnswer.exactValue
        const numericalAnswer = { ...prev.numericalAnswer! };
        
        if (nestedField === 'range') {
          // Handle range object
          numericalAnswer.range = { 
            ...numericalAnswer.range,
            ...(typeof value === 'object' ? value : {})
          };
        } else if (nestedField === 'exactValue') {
          // Handle exact value (number)
          numericalAnswer.exactValue = parseFloat(value as string);
        } else {
          // Handle other properties
          (numericalAnswer as any)[nestedField] = value;
        }
        
        newState.numericalAnswer = numericalAnswer;
      } else if (nestedField && fieldName === 'numericalAnswer.range') {
        // Handle doubly nested like numericalAnswer.range.min
        const numericalAnswer = { ...prev.numericalAnswer! };
        numericalAnswer.range = {
          ...numericalAnswer.range,
          [nestedField]: parseFloat(value as string)
        };
        newState.numericalAnswer = numericalAnswer;
      } else {
        // Handle simple fields
        (newState as any)[fieldName] = value;
      }
      
      return newState;
    });
    
    setSaved(false);
  };

  // Handle file upload
  const handleFileUpload = (file: File | null, field: string, index?: number) => {
    setFormData(prev => {
      if (field === 'questionImage') {
        return { ...prev, questionImage: file };
      } else if (field === 'solutionImage') {
        return { ...prev, solutionImage: file };
      } else if (field === 'optionImage' && index !== undefined) {
        const newOptions = [...prev.options];
        newOptions[index] = { ...newOptions[index], image: file };
        return { ...prev, options: newOptions };
      } else if (field === 'hintImage' && index !== undefined) {
        const newHints = [...prev.hints];
        newHints[index] = { ...newHints[index], image: file };
        return { ...prev, hints: newHints };
      }
      return prev;
    });
    
    setSaved(false);
  };
  
  // Handle correct option selection
  const handleCorrectOptionChange = (index: number) => {
    setFormData(prev => {
      // For single choice, replace the array with just this index
      if (prev.questionType === 'single') {
        return { ...prev, correctOptions: [index] };
      }
      
      // For multiple choice, toggle the index
      const newCorrectOptions = [...prev.correctOptions];
      const existingIndex = newCorrectOptions.indexOf(index);
      
      if (existingIndex >= 0) {
        newCorrectOptions.splice(existingIndex, 1);
      } else {
        newCorrectOptions.push(index);
      }
      
      return { ...prev, correctOptions: newCorrectOptions };
    });
    
    setSaved(false);
    
    // Clear error for correctOptions
    setErrors(prev => ({ ...prev, correctOptions: '' }));
  };
  
  // Handle arrays like tags, prerequisites, etc.
  const handleArrayField = (e: React.ChangeEvent<HTMLInputElement>, field: string) => {
    const value = e.target.value.split(',').map(item => item.trim()).filter(Boolean);
    setFormData(prev => ({ ...prev, [field]: value }));
    
    setSaved(false);
  };
  
  // Add/remove options
  const addOption = () => {
    setFormData(prev => ({
      ...prev,
      options: [...prev.options, { text: '', image: null }]
    }));
    
    setSaved(false);
  };
  
  const removeOption = (index: number) => {
    setFormData(prev => {
      const newOptions = [...prev.options];
      newOptions.splice(index, 1);
      
      // Update correctOptions if needed
      const newCorrectOptions = prev.correctOptions
        .filter(i => i !== index)
        .map(i => (i > index ? i - 1 : i));
      
      return {
        ...prev,
        options: newOptions,
        correctOptions: newCorrectOptions
      };
    });
    
    setSaved(false);
  };
  
  // Add/remove hints
  const addHint = () => {
    if (formData.hints.length < 3) {
      setFormData(prev => ({
        ...prev,
        hints: [...prev.hints, { text: '', image: null }]
      }));
      
      setSaved(false);
    }
  };

  const removeHint = (index: number) => {
    setFormData(prev => {
      const newHints = [...prev.hints];
      newHints.splice(index, 1);
      return { ...prev, hints: newHints };
    });
    
    setSaved(false);
  };
  
  // Add/remove common mistakes
  const addCommonMistake = () => {
    setFormData(prev => ({
      ...prev,
      commonMistakes: [...prev.commonMistakes, { description: '', explanation: '' }]
    }));
    
    setSaved(false);
  };

  const removeCommonMistake = (index: number) => {
    setFormData(prev => {
      const newMistakes = [...prev.commonMistakes];
      newMistakes.splice(index, 1);
      return { ...prev, commonMistakes: newMistakes };
    });
    
    setSaved(false);
  };
  
  // Get subject sections
  const getSubjectSections = () => {
    switch (formData.subject.toLowerCase()) {
      case 'physics':
        return PHYSICS_SECTIONS;
      case 'chemistry':
        return CHEMISTRY_SECTIONS;
      case 'mathematics':
        return MATHEMATICS_SECTIONS;
      default:
        return [];
    }
  };
  
  // Validate form based on current step
  const validateForm = (currentStep: number) => {
    const errors: Record<string, string> = {};
    
    if (currentStep === 1) {
      // Question type and content validation
      if (!formData.questionType) {
        errors.questionType = 'Please select a question type';
      }
      
      if (!formData.question && !formData.questionImage) {
        errors.question = 'Please provide either question text or an image';
      }
      
      if (formData.questionType !== 'numerical') {
        if (formData.options.length < 2) {
          errors.options = 'At least 2 options are required';
        }
        
        const emptyOptions = formData.options.some(
          opt => !opt.text && !opt.image
        );
        if (emptyOptions) {
          errors.options = 'All options must have text or an image';
        }
        
        if (formData.correctOptions.length === 0) {
          errors.correctOptions = 'Please select at least one correct option';
        }
        
        if (formData.questionType === 'single' && formData.correctOptions.length > 1) {
          errors.correctOptions = 'Single choice questions can only have one correct option';
        }
      } else {
        // Numerical question validation
        if (!formData.numericalAnswer.exactValue && 
            (!formData.numericalAnswer.range.min || !formData.numericalAnswer.range.max)) {
          errors.numericalAnswer = 'Please provide either an exact value or a valid range';
        }
        
        if (formData.numericalAnswer.range.min > formData.numericalAnswer.range.max) {
          errors.numericalAnswer = 'Minimum value should be less than maximum value';
        }
      }
    } else if (currentStep === 2) {
      // Subject and classification validation
      if (!formData.examType) {
        errors.examType = 'Please select an exam type';
      }
      
      if (!formData.subject) {
        errors.subject = 'Please select a subject';
      }
      
      if (!formData.chapter) {
        errors.chapter = 'Please enter a chapter name';
      }
      
      if (formData.subject) {
        const sectionField = `section${formData.subject.charAt(0).toUpperCase() + formData.subject.slice(1)}` as keyof typeof formData;
        if (!formData[sectionField]) {
          errors[sectionField] = 'Please select a section';
        }
      }
      
      if (!formData.difficulty) {
        errors.difficulty = 'Please select a difficulty level';
      }
    }
    
    return errors;
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Final validation
    const validationErrors = validateForm(step);
    
    // Only validate all steps when submitting the form
    let allValidationErrors = {};
    for (let i = 1; i <= 4; i++) {
      const stepErrors = validateForm(i);
      allValidationErrors = { ...allValidationErrors, ...stepErrors };
    }
    
    if (Object.keys(allValidationErrors).length > 0) {
      setErrors(allValidationErrors);
      
      // Find the first error field and scroll to it
      const firstErrorField = Object.keys(allValidationErrors)[0];
      const element = document.getElementById(firstErrorField);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        element.focus();
      }
      
      // Identify which step contains the first error and navigate to it
      for (let i = 1; i <= 4; i++) {
        const stepErrors = validateForm(i);
        if (Object.keys(stepErrors).length > 0) {
          setStep(i);
          toast.error(`Please fix errors in step ${i}: ${FORM_STEPS[i-1].title}`);
          break;
        }
      }
      
      return;
    }
    
    setLoading(true);
    
    try {
      // Prepare FormData for file uploads
      const formDataToSubmit = new FormData();
      
      // Add basic fields
      const questionDataToSend = {
        questionText: formData.question,
        questionType: formData.questionType,
        subject: formData.subject,
        chapter: formData.chapter,
        examType: formData.examType,
        difficulty: formData.difficulty,
        marks: formData.marks,
        negativeMarks: formData.negativeMarks,
        language: formData.language,
        languageLevel: formData.languageLevel,
        solutionText: formData.solution,
        tags: formData.tags,
        prerequisites: formData.prerequisites,
        relatedTopics: formData.relatedTopics,
        year: formData.year,
        conceptualDifficulty: formData.conceptualDifficulty,
        expectedTime: formData.expectedTime,
        isVerified: formData.isVerified,
      };
      
      // Add section based on subject
      if (formData.subject.toLowerCase() === 'physics') {
        Object.assign(questionDataToSend, { sectionPhysics: formData.sectionPhysics });
      } else if (formData.subject.toLowerCase() === 'chemistry') {
        Object.assign(questionDataToSend, { sectionChemistry: formData.sectionChemistry });
      } else if (formData.subject.toLowerCase() === 'mathematics') {
        Object.assign(questionDataToSend, { sectionMathematics: formData.sectionMathematics });
      }
      
      // Add numerical answer or options based on question type
      if (formData.questionType === 'numerical') {
        Object.assign(questionDataToSend, {
          exactValue: formData.numericalAnswer?.exactValue,
          rangeMin: formData.numericalAnswer?.range.min,
          rangeMax: formData.numericalAnswer?.range.max,
          unit: formData.numericalAnswer?.unit
        });
      } else {
        // Prepare options without image data
        const options = formData.options.map(opt => opt.text);
        Object.assign(questionDataToSend, {
          options: JSON.stringify(options),
          correctOptions: JSON.stringify(formData.correctOptions)
        });
      }
      
      // Add hints if present
      if (formData.hints.length > 0) {
        const hintsData = formData.hints.map(hint => ({ text: hint.text }));
        Object.assign(questionDataToSend, { hints: JSON.stringify(hintsData) });
      }
      
      // Add common mistakes if present
      if (formData.commonMistakes.length > 0) {
        Object.assign(questionDataToSend, { 
          commonMistakes: JSON.stringify(formData.commonMistakes) 
        });
      }
      
      // Append the data object as JSON
      formDataToSubmit.append('data', JSON.stringify(questionDataToSend));
      
      // Append image files
      if (formData.questionImage) {
        formDataToSubmit.append('questionImage', formData.questionImage);
      }
      
      if (formData.solutionImage) {
        formDataToSubmit.append('solutionImage', formData.solutionImage);
      }
      
      // Append option images if present
      formData.options.forEach((option, index) => {
        if (option.image) {
          formDataToSubmit.append('optionImages', option.image);
          formDataToSubmit.append('optionImageIndexes', index.toString());
        }
      });
      
      // Append hint images if present
      formData.hints.forEach((hint, index) => {
        if (hint.image) {
          formDataToSubmit.append('hintImages', hint.image);
          formDataToSubmit.append('hintImageIndexes', index.toString());
        }
      });
      
      // Determine API endpoint
      const apiUrl = process.env.NEXT_PUBLIC_API_URL 
        ? `${process.env.NEXT_PUBLIC_API_URL}/api/admin/questions/upload` 
        : '/api/admin/questions/upload';
      
      const response = await fetch(apiUrl, {
        method: "POST",
        credentials: "include", // Include cookies for authentication
        body: formDataToSubmit
      });
      
      const result = await response.json();
      
      if (response.ok) {
        setSaved(true);
        
        // Show success message and redirect
        toast.success("Question added successfully!");
        localStorage.removeItem('questionDraft');
        
        setTimeout(() => {
          router.push("/admin/questions");
        }, 1500);
      } else {
        const errorMessage = result.message || result.error || 'Failed to upload question';
        setErrors({ submit: errorMessage });
        toast.error(errorMessage);
      }
    } catch (error: any) {
      console.error('Error submitting question:', error);
      
      // Set specific error message if available
      const errorMessage = error.message || 'Network error occurred. Please try again.';
      setErrors({ submit: errorMessage });
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Don't trigger shortcuts if user is typing in an input field
      if (
        document.activeElement?.tagName === 'INPUT' || 
        document.activeElement?.tagName === 'TEXTAREA' || 
        document.activeElement?.tagName === 'SELECT'
      ) {
        // Exception for Ctrl+S which should work even in input fields
        if (!(e.ctrlKey && e.key === 's')) {
          return;
        }
      }

      // Ctrl+S to save
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
        // Save form data to localStorage
        const dataToSave = { ...formData };
        dataToSave.questionImage = null;
        dataToSave.solutionImage = null;
        dataToSave.options = dataToSave.options.map(opt => ({ ...opt, image: null }));
        dataToSave.hints = dataToSave.hints.map(hint => ({ ...hint, image: null }));
        
        localStorage.setItem('questionDraft', JSON.stringify(dataToSave));
        setSaved(true);
        toast.success('Draft saved successfully');
        
        // Hide the saved message after 3 seconds
        setTimeout(() => {
          setSaved(false);
        }, 3000);
      }
      
      // Navigate with arrow keys + ctrl
      if (e.ctrlKey && e.key === 'ArrowRight') {
        e.preventDefault();
        if (step < 4) {
          setStep(prev => prev + 1);
          toast.success(`Step ${step + 1}: ${FORM_STEPS[step].title}`);
        }
      }
      
      if (e.ctrlKey && e.key === 'ArrowLeft') {
        e.preventDefault();
        if (step > 1) {
          setStep(prev => prev - 1);
          toast.success(`Step ${step - 1}: ${FORM_STEPS[step - 2].title}`);
        }
      }
      
      // Number keys for direct navigation (1-4)
      if (e.ctrlKey && ['1', '2', '3', '4'].includes(e.key)) {
        e.preventDefault();
        const newStep = parseInt(e.key);
        setStep(newStep);
        toast.success(`Step ${newStep}: ${FORM_STEPS[newStep - 1].title}`);
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [formData, step]);

  // Define navigation buttons
  const renderNavigationButtons = () => (
    <div className="flex flex-wrap sm:flex-nowrap justify-between mt-8 gap-2">
      <div className="flex gap-2">
        <button
          type="button"
          onClick={() => setStep(Math.max(1, step - 1))}
          className="px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg text-sm font-medium"
        >
          <div className="flex items-center">
            <ChevronLeft size={16} className="mr-1" />
            Previous
          </div>
        </button>
        
        <button
          type="button"
          onClick={() => setStep(Math.min(4, step + 1))}
          className={`px-4 py-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg text-sm font-medium ${step === 4 ? 'opacity-50 cursor-not-allowed' : ''}`}
          disabled={step === 4}
        >
          <div className="flex items-center">
            Next
            <ChevronRight size={16} className="ml-1" />
          </div>
        </button>
      </div>
      
      <div className="flex gap-2 w-full sm:w-auto justify-end">
        <button
          type="button"
          onClick={() => {
            localStorage.removeItem('questionDraft');
            router.push('/admin/questions');
          }}
          className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50"
        >
          Cancel
        </button>
        
        <button
          type="submit"
          className="px-5 py-2 bg-green-600 rounded-lg text-sm font-medium text-white hover:bg-green-700"
        >
          <div className="flex items-center">
            <Save size={16} className="mr-1" />
            Save Question
          </div>
        </button>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto p-6 max-w-5xl">
      {/* Toast notifications container */}
      <Toaster 
        position="top-right"
        toastOptions={{
          duration: 3000,
          style: {
            background: '#FFFFFF',
            color: '#333333',
            border: '1px solid #E2E8F0',
            padding: '12px',
            borderRadius: '8px',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          },
          success: {
            iconTheme: {
              primary: '#10B981',
              secondary: '#FFFFFF',
            },
          },
          error: {
            iconTheme: {
              primary: '#EF4444',
              secondary: '#FFFFFF',
            },
          }
        }}
      />

      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Add New Question</h1>
        <p className="mt-2 text-gray-600">Complete the form to add a new question to the database.</p>
      </div>

      {/* Progress Steps - updated with better hover states */}
      <div className="mb-8">
        <div className="flex flex-wrap md:flex-nowrap items-center justify-between">
          {FORM_STEPS.map((formStep, index) => {
            const stepNumber = index + 1;
            const isCurrentStep = step === stepNumber;
            const isCompleted = stepNumber < step;
            
            let stepClass = "border-gray-300 text-gray-700 hover:bg-gray-50";
            if (isCurrentStep) {
              stepClass = "border-blue-500 text-blue-600 bg-blue-50";
            } else if (isCompleted) {
              stepClass = "border-green-400 text-green-700 bg-green-50";
            }
            
            return (
              <button
                key={index}
                onClick={() => setStep(stepNumber)}
                className={`flex items-center px-4 py-2 mb-2 md:mb-0 border-2 rounded-lg mr-2 transition-colors ${stepClass}`}
                aria-current={isCurrentStep ? "step" : undefined}
                aria-label={`Go to step ${stepNumber}: ${formStep.title}`}
                type="button"
              >
                <span className="flex items-center justify-center w-6 h-6 mr-2 rounded-full bg-white border border-current text-sm font-medium">
                  {isCompleted ? (
                    <CheckCircle size={14} />
                  ) : (
                    stepNumber
                  )}
                </span>
                <span className="text-sm font-medium hidden sm:inline">{formStep.title}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Mobile dropdown navigation (visible on small screens) */}
      <div className="mb-4 sm:hidden">
        <select
          value={step}
          onChange={(e) => setStep(Number(e.target.value))}
          className="w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          aria-label="Navigate between form sections"
        >
          {FORM_STEPS.map((formStep, index) => (
            <option key={index} value={index + 1}>
              {index + 1}. {formStep.title}
            </option>
          ))}
        </select>
      </div>

      <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
        {/* Current step title with progress indicator */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between border-b border-gray-200 pb-4 mb-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-2 sm:mb-0">
            {FORM_STEPS[step - 1].title}
          </h2>
          <div className="text-sm text-gray-500">
            Step {step} of {FORM_STEPS.length}
          </div>
        </div>

        {/* Step 1: Question Content */}
        {step === 1 && (
          <div className="space-y-6">
            <div className="flex items-center justify-between mb-4">
              <div className="text-sm font-medium text-gray-700">Question Type</div>
              <div className="flex space-x-2">
                <select
                  value={formData.questionType}
                  onChange={(e) => handleInputChange(e, 'questionType')}
                  className="px-3 py-2 border rounded-lg bg-gray-50 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {QUESTION_TYPES.map(type => (
                    <option key={type.value} value={type.value}>{type.label}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div>
              <div className="flex justify-between items-start mb-1">
                <label htmlFor="question" className="block text-sm font-medium text-gray-700">
                  Question Text
                </label>
                <div className="mb-1">
                  <FileUpload 
                    onFileSelect={(file) => handleFileUpload(file, 'questionImage')} 
                    label="Add Image"
                    compact={true}
                    initialFile={formData.questionImage}
                  />
                </div>
              </div>
              <textarea
                id="question"
                name="question"
                value={formData.question}
                onChange={(e) => handleInputChange(e)}
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-h-[120px]"
                placeholder="Enter your question here..."
              />
              {errors.question && (
                <p className="mt-1 text-sm text-red-500">{errors.question}</p>
              )}
              
              {formData.questionImage && (
                <div className="mt-2 p-2 bg-gray-50 rounded-lg border border-gray-200">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500">Image attached</span>
                    <button
                      type="button"
                      onClick={() => handleFileUpload(null, 'questionImage')}
                      className="text-red-500 hover:text-red-700 text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-md"
                    >
                      Remove
                    </button>
                  </div>
                  <div className="mt-1">
                    <ImagePreview file={formData.questionImage} onRemove={() => handleFileUpload(null, 'questionImage')} size="md" />
                  </div>
                </div>
              )}
            </div>

            {formData.questionType !== 'numerical' ? (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <label className="block text-sm font-medium text-gray-700">Options</label>
                  {formData.options.length < 6 && (
                    <button
                      type="button"
                      onClick={addOption}
                      className="inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-blue-50 text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                    >
                      <PlusCircle size={14} className="mr-1" />
                      Add Option
                    </button>
                  )}
                </div>
                
                {errors.options && (
                  <p className="text-sm text-red-500">{errors.options}</p>
                )}
                
                <div className="space-y-3">
                  {formData.options.map((option, index) => (
                    <div key={index} className="border rounded-lg p-4 bg-gray-50 transition-all hover:shadow-sm">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <div
                            className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 cursor-pointer ${
                              formData.correctOptions.includes(index)
                                ? 'bg-emerald-500 text-white'
                                : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                            } focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                              formData.correctOptions.includes(index) ? 'focus:ring-emerald-500' : 'focus:ring-gray-500'
                            }`}
                            onClick={() => handleCorrectOptionChange(index)}
                            onKeyDown={(e) => {
                              if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                handleCorrectOptionChange(index);
                              }
                            }}
                            tabIndex={0}
                            role="checkbox"
                            aria-checked={formData.correctOptions.includes(index)}
                            aria-label={`Mark option ${String.fromCharCode(65 + index)} as ${formData.correctOptions.includes(index) ? 'incorrect' : 'correct'}`}
                          >
                            {String.fromCharCode(65 + index)}
                          </div>
                          <span className="text-sm font-medium text-gray-700">
                            {formData.correctOptions.includes(index) ? 'Correct' : 'Incorrect'}
                          </span>
                        </div>
                        
                        {formData.options.length > 2 && (
                          <button
                            type="button"
                            onClick={() => removeOption(index)}
                            className="text-red-500 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-full"
                          >
                            <MinusCircle size={16} />
                          </button>
                        )}
                      </div>
                      
                      <div className="flex items-start gap-2">
                        <div className="flex-grow">
                          <input
                            type="text"
                            value={option.text}
                            onChange={(e) => handleInputChange(e, 'options', 'text', index)}
                            className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder={`Option ${String.fromCharCode(65 + index)}`}
                          />
                        </div>
                        <div className="flex-shrink-0 pt-1">
                          <FileUpload 
                            onFileSelect={(file) => handleFileUpload(file, 'optionImage', index)} 
                            compact={true}
                            initialFile={option.image}
                          />
                        </div>
                      </div>
                      
                      {option.image && (
                        <div className="mt-2">
                          <ImagePreview file={option.image} onRemove={() => handleFileUpload(null, 'optionImage', index)} size="sm" />
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                
                {errors.correctOptions && (
                  <p className="text-sm text-red-500">{errors.correctOptions}</p>
                )}
              </div>
            ) : (
              <div className="space-y-4 border rounded-lg p-4 bg-blue-50">
                <h3 className="text-md font-medium text-gray-800">Numerical Answer</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Exact Value
                    </label>
                    <input
                      type="number"
                      value={formData.numericalAnswer?.exactValue || 0}
                      onChange={(e) => handleInputChange(
                        e, 
                        'numericalAnswer', 
                        'exactValue',
                      )}
                      step="any"
                      className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                    {errors['numericalAnswer.exactValue'] && (
                      <p className="mt-1 text-sm text-red-500">{errors['numericalAnswer.exactValue']}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Unit (optional)
                    </label>
                    <input
                      type="text"
                      value={formData.numericalAnswer?.unit || ''}
                      onChange={(e) => handleInputChange(
                        e, 
                        'numericalAnswer', 
                        'unit',
                      )}
                      placeholder="e.g., m/s, kg, °C"
                      className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Range Minimum
                    </label>
                    <input
                      type="number"
                      value={formData.numericalAnswer?.range.min || 0}
                      onChange={(e) => handleInputChange(
                        {
                          target: {
                            name: 'numericalAnswer.range', 
                            value: parseFloat(e.target.value)
                          }
                        } as any, 
                        'numericalAnswer.range', 
                        'min'
                      )}
                      step="any"
                      className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Range Maximum
                    </label>
                    <input
                      type="number"
                      value={formData.numericalAnswer?.range.max || 0}
                      onChange={(e) => handleInputChange(
                        {
                          target: {
                            name: 'numericalAnswer.range', 
                            value: parseFloat(e.target.value)
                          }
                        } as any, 
                        'numericalAnswer.range', 
                        'max'
                      )}
                      step="any"
                      className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                {errors['numericalAnswer.range'] && (
                  <p className="text-sm text-red-500">{errors['numericalAnswer.range']}</p>
                )}
                
                <div className="mt-2 text-sm text-gray-600 bg-blue-100 p-2 rounded-md">
                  <AlertCircle className="inline mr-1" size={14} />
                  The exact value must fall within the range. The range defines the acceptable answers.
                </div>
              </div>
            )}
          </div>
        )}

        {/* Step 2: Details & Classification */}
        {step === 2 && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Exam Type</label>
                <select
                  name="examType"
                  value={formData.examType}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Select Exam Type</option>
                  {EXAM_TYPES.map(type => (
                    <option key={type.value} value={type.value}>{type.label}</option>
                  ))}
                </select>
                {errors.examType && (
                  <p className="mt-1 text-sm text-red-500">{errors.examType}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                <select
                  name="subject"
                  value={formData.subject}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Select Subject</option>
                  {SUBJECTS.map(subject => (
                    <option key={subject.value} value={subject.value}>{subject.label}</option>
                  ))}
                </select>
                {errors.subject && (
                  <p className="mt-1 text-sm text-red-500">{errors.subject}</p>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Chapter</label>
                <input
                  type="text"
                  name="chapter"
                  value={formData.chapter}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter chapter name"
                  required
                />
                {errors.chapter && (
                  <p className="mt-1 text-sm text-red-500">{errors.chapter}</p>
                )}
              </div>

              {formData.subject && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Section</label>
                  <select
                    name={`section${formData.subject}`}
                    value={formData[`section${formData.subject}` as keyof typeof formData] as string}
                    onChange={handleInputChange}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">Select Section</option>
                    {getSubjectSections().map(section => (
                      <option key={section.value} value={section.value}>{section.label}</option>
                    ))}
                  </select>
                  {errors[`section${formData.subject}` as keyof typeof errors] && (
                    <p className="mt-1 text-sm text-red-500">
                      {errors[`section${formData.subject}` as keyof typeof errors]}
                    </p>
                  )}
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
                <select
                  name="difficulty"
                  value={formData.difficulty}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  {DIFFICULTY_LEVELS.map(level => (
                    <option key={level.value} value={level.value}>{level.label}</option>
                  ))}
                </select>
                {errors.difficulty && (
                  <p className="mt-1 text-sm text-red-500">{errors.difficulty}</p>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Conceptual Difficulty (1-10)</label>
                <div className="flex items-center">
                  <input
                    type="range"
                    name="conceptualDifficulty"
                    min="1"
                    max="10"
                    value={formData.conceptualDifficulty}
                    onChange={handleInputChange}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <span className="ml-2 text-gray-700 font-medium">{formData.conceptualDifficulty}</span>
                </div>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6 mt-6">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Language & Year</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Language</label>
                  <select
                    name="language"
                    value={formData.language}
                    onChange={handleInputChange}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {LANGUAGES.map(lang => (
                      <option key={lang.value} value={lang.value}>{lang.label}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Language Level</label>
                  <select
                    name="languageLevel"
                    value={formData.languageLevel}
                    onChange={handleInputChange}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {LANGUAGE_LEVELS.map(level => (
                      <option key={level.value} value={level.value}>{level.label}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Year</label>
                  <select
                    name="year"
                    value={formData.year}
                    onChange={handleInputChange}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="not applicable">Not Applicable</option>
                    {YEARS.map(year => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6 mt-6">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Marks & Time</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Marks</label>
                  <input
                    type="number"
                    name="marks"
                    value={formData.marks}
                    onChange={handleInputChange}
                    min="0"
                    max="100"
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Negative Marks</label>
                  <input
                    type="number"
                    name="negativeMarks"
                    value={formData.negativeMarks}
                    onChange={handleInputChange}
                    max="0"
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Expected Time (seconds)</label>
                  <input
                    type="number"
                    name="expectedTime"
                    value={formData.expectedTime}
                    onChange={handleInputChange}
                    min="0"
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 3: Solution & Hints */}
        {step === 3 && (
          <div className="space-y-6">
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-700">Solution</h3>
              <div>
                <div className="flex justify-between items-start mb-1">
                  <label htmlFor="solution" className="block text-sm font-medium text-gray-700">
                    Solution Text
                  </label>
                  <div className="mb-1">
                    <FileUpload 
                      onFileSelect={(file) => handleFileUpload(file, 'solutionImage')} 
                      label="Add Image"
                      compact={true}
                      initialFile={formData.solutionImage}
                    />
                  </div>
                </div>
                <textarea
                  id="solution"
                  name="solution"
                  value={formData.solution}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-h-[150px]"
                  placeholder="Provide a detailed solution..."
                />
              </div>
              
              {formData.solutionImage && (
                <div className="mt-2 p-2 bg-gray-50 rounded-lg border border-gray-200">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500">Solution image attached</span>
                    <button
                      type="button"
                      onClick={() => handleFileUpload(null, 'solutionImage')}
                      className="text-red-500 hover:text-red-700 text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-md"
                    >
                      Remove
                    </button>
                  </div>
                  <div className="mt-1">
                    <ImagePreview 
                      file={formData.solutionImage} 
                      onRemove={() => handleFileUpload(null, 'solutionImage')} 
                      size="md" 
                    />
                  </div>
                </div>
              )}
            </div>
            
            <div className="border-t border-gray-200 pt-6 mt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-700">Hints</h3>
                {formData.hints.length < 3 && (
                  <button
                    type="button"
                    onClick={addHint}
                    className="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded bg-blue-50 text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  >
                    <PlusCircle size={16} className="mr-1" />
                    Add Hint
                  </button>
                )}
              </div>
              
              <div className="space-y-4">
                {formData.hints.length === 0 ? (
                  <div className="text-center py-6 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                    <Lightbulb className="mx-auto h-8 w-8 text-gray-400" />
                    <p className="mt-2 text-sm text-gray-500">
                      No hints added yet. Add up to 3 hints to help students.
                    </p>
                  </div>
                ) : (
                  formData.hints.map((hint, index) => (
                    <div key={index} className="bg-gray-50 rounded-lg p-4 border border-gray-200 transition-all hover:shadow-sm">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-md font-medium text-gray-700">
                          Hint {index + 1}
                        </h4>
                        <button
                          type="button"
                          onClick={() => removeHint(index)}
                          className="text-red-500 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-full"
                          aria-label={`Remove hint ${index + 1}`}
                        >
                          <MinusCircle size={16} />
                        </button>
                      </div>
                      
                      <div className="flex items-start gap-2">
                        <div className="flex-grow mb-3">
                          <textarea
                            value={hint.text}
                            onChange={(e) => handleInputChange(e, 'hints', 'text', index)}
                            className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter hint text"
                            rows={3}
                          />
                        </div>
                        <div className="flex-shrink-0 pt-1">
                          <FileUpload 
                            onFileSelect={(file) => handleFileUpload(file, 'hintImage', index)} 
                            compact={true}
                            initialFile={hint.image}
                          />
                        </div>
                      </div>
                      
                      {hint.image && (
                        <div className="mt-2">
                          <ImagePreview 
                            file={hint.image} 
                            onRemove={() => handleFileUpload(null, 'hintImage', index)} 
                            size="sm" 
                          />
                        </div>
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6 mt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-700">Common Mistakes</h3>
                <button
                  type="button"
                  onClick={addCommonMistake}
                  className="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded bg-blue-50 text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                >
                  <PlusCircle size={16} className="mr-1" />
                  Add Common Mistake
                </button>
              </div>
              
              <div className="space-y-4">
                {formData.commonMistakes.length === 0 ? (
                  <div className="text-center py-6 bg-gray-50 rounded-lg border border-dashed border-gray-300">
                    <AlertCircle className="mx-auto h-8 w-8 text-gray-400" />
                    <p className="mt-2 text-sm text-gray-500">
                      No common mistakes added yet. Adding these helps students avoid typical errors.
                    </p>
                  </div>
                ) : (
                  formData.commonMistakes.map((mistake, index) => (
                    <div key={index} className="bg-red-50 rounded-lg p-4 border border-red-100 transition-all hover:shadow-sm">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-md font-medium text-gray-700">
                          Common Mistake {index + 1}
                        </h4>
                        <button
                          type="button"
                          onClick={() => removeCommonMistake(index)}
                          className="text-red-500 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-full"
                          aria-label={`Remove common mistake ${index + 1}`}
                        >
                          <MinusCircle size={16} />
                        </button>
                      </div>
                      
                      <div className="mb-3">
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Description
                        </label>
                        <input
                          type="text"
                          value={mistake.description}
                          onChange={(e) => handleInputChange(e, 'commonMistakes', 'description', index)}
                          className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Describe the mistake (e.g., 'Forgetting to convert units')"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Explanation
                        </label>
                        <textarea
                          value={mistake.explanation}
                          onChange={(e) => handleInputChange(e, 'commonMistakes', 'explanation', index)}
                          className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Explain why this is a mistake and how to avoid it"
                          rows={3}
                        />
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )}

        {/* Step 4: Tags and Related Topics */}
        {step === 4 && (
          <div className="space-y-6">
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tags
                  <span className="text-xs text-gray-500 ml-1">
                    (comma-separated)
                  </span>
                </label>
                <input
                  type="text"
                  name="tags"
                  value={Array.isArray(formData.tags) ? formData.tags.join(', ') : ''}
                  onChange={(e) => handleArrayField(e, 'tags')}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., kinematics, vectors, calculus"
                />
                <p className="mt-1 text-xs text-gray-500">
                  Add keywords that help categorize and search for this question
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Prerequisites
                  <span className="text-xs text-gray-500 ml-1">
                    (comma-separated)
                  </span>
                </label>
                <input
                  type="text"
                  name="prerequisites"
                  value={Array.isArray(formData.prerequisites) ? formData.prerequisites.join(', ') : ''}
                  onChange={(e) => handleArrayField(e, 'prerequisites')}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., basic algebra, differentiation"
                />
                <p className="mt-1 text-xs text-gray-500">
                  Knowledge required to solve this question
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Related Topics
                  <span className="text-xs text-gray-500 ml-1">
                    (comma-separated)
                  </span>
                </label>
                <input
                  type="text"
                  name="relatedTopics"
                  value={Array.isArray(formData.relatedTopics) ? formData.relatedTopics.join(', ') : ''}
                  onChange={(e) => handleArrayField(e, 'relatedTopics')}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., projectile motion, conservation of energy"
                />
                <p className="mt-1 text-xs text-gray-500">
                  Other topics that relate to this question
                </p>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6 mt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-700">Final Confirmation</h3>
              </div>
              
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <p className="text-sm text-gray-700">
                  Please review your question before submitting. Once submitted, the question will be available
                  for verification by administrators before being published to students.
                </p>
                
                <div className="flex items-center mt-4">
                  <input
                    type="checkbox"
                    id="isVerified"
                    name="isVerified"
                    checked={formData.isVerified}
                    onChange={(e) => setFormData(prev => ({ ...prev, isVerified: e.target.checked }))}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="isVerified" className="ml-2 block text-sm text-gray-700">
                    I confirm that this question is ready for review
                  </label>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Navigation Buttons */}
        {renderNavigationButtons()}

        {/* Loading and Success States */}
        {loading && (
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white p-6 rounded-lg shadow-lg flex items-center">
              <Loader2 className="h-6 w-6 text-blue-600 animate-spin mr-3" />
              <p className="text-gray-700">Saving question...</p>
            </div>
          </div>
        )}
        
        {saved && (
          <div className="fixed bottom-4 right-4 bg-green-100 text-green-800 px-4 py-2 rounded-lg shadow flex items-center">
            <CheckCircle className="h-5 w-5 mr-2" />
            Draft saved automatically
          </div>
        )}

        {/* Submit Error Message */}
        {errors.submit && (
          <div className="mt-4 p-4 border border-red-200 rounded-lg bg-red-50">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-500 mr-2 flex-shrink-0" />
              <p className="text-sm text-red-600">{errors.submit}</p>
            </div>
          </div>
        )}

        {/* Keyboard Shortcuts Help */}
        <KeyboardShortcuts />
      </form>

      {/* Preview Panel */}
      <div className="mt-8 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center space-x-2 mb-4">
          <Lightbulb className="w-5 h-5 text-gray-500" />
          <h3 className="text-lg font-medium text-gray-900">Preview</h3>
        </div>
        <div className="space-y-4">
          <p className="text-gray-900">{formData.question || 'Your question will appear here...'}</p>
          {formData.options.map((option, index) => (
            <div
              key={index}
              className={`p-3 rounded-lg ${
                formData.correctOptions.includes(index)
                  ? 'bg-emerald-50 border border-emerald-200'
                  : 'bg-gray-50 border border-gray-200'
              }`}
            >
              <span className="font-medium mr-2">{String.fromCharCode(65 + index)}.</span>
              {option.text || `Option ${String.fromCharCode(65 + index)} will appear here...`}
            </div>
          ))}
          {(formData.subject || formData.examType || formData.difficulty) && (
            <div className="flex flex-wrap gap-2 mt-4">
              {formData.subject && (
                <span className="px-2 py-1 text-sm bg-blue-50 text-blue-700 rounded">
                  {formData.subject}
                </span>
              )}
              {formData.examType && (
                <span className="px-2 py-1 text-sm bg-purple-50 text-purple-700 rounded">
                  {formData.examType}
                </span>
              )}
              {formData.difficulty && (
                <span className="px-2 py-1 text-sm bg-orange-50 text-orange-700 rounded">
                  {formData.difficulty}
                </span>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

